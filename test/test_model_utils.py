"""
   Python SDK for OpenFGA

   API version: 0.1
   Website: https://openfga.dev
   Documentation: https://openfga.dev/docs
   Support: https://discord.gg/8naAwJfWN6
   License: [Apache-2.0](https://github.com/openfga/python-sdk/blob/main/LICENSE)

   NOTE: This file was auto generated by OpenAPI Generator (https://openapi-generator.tech). DO NOT EDIT.
"""


import unittest
import json

import openfga_sdk
from openfga_sdk.model.type_definition import TypeDefinition
from openfga_sdk.model.type_definitions import TypeDefinitions
from openfga_sdk.model.object_relation import ObjectRelation
from openfga_sdk.model.userset import Userset
from openfga_sdk.model.usersets import Usersets


class ModelUtilsTest(unittest.TestCase):
    """Testing model utils"""

    def setUp(self):
        self.configuration = openfga_sdk.Configuration(
            api_scheme='https',
            api_host="api.fga.example",
        )

    def tearDown(self):
        pass

    def test_validate_and_convert_types(self):
        """
        Test the validate and covert type functionality
        """
        input = '{"type_definitions":[{"type":"document","relations":{"writer":{"this":{}},"reader":{"union":{"child":[{"this":{}},{"computedUserset":{"object":"","relation":"writer"}}]}}}}]}'
        expected_object = TypeDefinitions(
            type_definitions=[
                TypeDefinition(
                    type="document",
                    relations=dict(
                        writer=Userset(
                            this=dict(),
                        ),
                        reader=Userset(
                            union=Usersets(
                                child=[
                                    Userset(this=dict()),
                                    Userset(computed_userset=ObjectRelation(
                                        object="",
                                        relation="writer",
                                    )),
                                ],
                            ),
                        ),
                    )
                ),
            ],
        )
        converted_object = openfga_sdk.model_utils.validate_and_convert_types(
            json.loads(input),
            (openfga_sdk.model.type_definitions.TypeDefinitions,),
            ['openfga_sdk.model.type_definitions.TypeDefinitions'],
            True,
            True,
            configuration=self.configuration
        )
        self.assertIsInstance(converted_object, TypeDefinitions)
        self.assertEqual(converted_object, expected_object)
